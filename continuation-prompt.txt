ðŸ”„ Generating resume-work prompt...

# Resume Work - Session Continuation

You are helping me continue work after a context window reset. I need you to synthesize the work context below into an effective continuation prompt that minimizes context loss and allows seamless resumption.

## Context Gathered

### Work Journal (.docent/journal.md)
<journal>
No journal found
</journal>

### Recent Commits (last 10)
```
83d823d feat: rebrand project from docket to docent
cc1b22c feat: add research-topic MCP prompt for structured research workflows
c070b41 feat: implement journal capture workflow with enhanced resume-work prompt
593dd38 docs: update journal with MCP resources and prompts implementation
c1461f0 feat: wire resources and prompts into MCP server
5669824 feat: implement MCP prompts for agent workflows
b15d356 feat: implement MCP resource providers for journal, templates, and runbooks
ad7a68a docs: add research on MCP resources and prompts implementation
29d988b docs: add RFC-0005 for enhanced MCP architecture with resources and prompts
fd2d79c docs: update documentation for MCP-only product

```

### Git Status
```
On branch main
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .docent/journal.md

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	continuation-prompt.txt

no changes added to commit (use "git add" and/or "git commit -a")

```

### TODOs Found
```
_research/bootstrap/bootstrap-design.md:418:{{TODO: ...}}            â†’ Kept as-is for manual completion
_research/bootstrap/bootstrap-design.md:474:Next: Customize TODO sections in documentation."
_research/bootstrap/bootstrap-design.md:584:â”‚      (Look for TODO markers)                                    â”‚
_research/bootstrap/bootstrap-design.md:599:â”‚    â€¢ Search for TODO markers: grep -r "TODO:" docs/            â”‚
_research/bootstrap/bootstrap-design.md:1045:â”‚   â€¢ TODO sections you've filled in                      â”‚
_research/bootstrap/bootstrap-design.md:1064:  # Check if file still has TODO markers
_research/bootstrap/bootstrap-design.md:1065:  if ! grep -q "{{TODO:" "$file"; then
_research/bootstrap/install.sh:906:[TODO: List prerequisites]
_research/bootstrap/install.sh:913:[TODO: Provide installation instructions]
_research/bootstrap/install.sh:921:[TODO: Provide a minimal working example]
_research/bootstrap/install.sh:943:[TODO: Add content for this section]
_research/bootstrap/install.sh:960:[TODO: Add overview of this section]
_research/bootstrap/install.sh:1027:- All TODO markers are addressed or have clear next steps
_research/bootstrap/install.sh:1249:     (Look for TODO markers)
_research/bootstrap/install.sh:1264:   â€¢ Find TODO markers: ${CYAN}grep -r "TODO:" $DOCS_DIR/${RESET}
_research/bootstrap/uninstall.sh:179:  # Check if file still has many TODO markers (likely not customized)
_research/bootstrap/uninstall.sh:180:  local todo_count=$(grep -c "{{TODO:" "$file" 2>/dev/null || echo 0)
_research/bootstrap/uninstall.sh:193:  # If TODO markers removed or multiple commits, consider it customized
_research/bootstrap/uninstall.sh:195:    return 0  # Customized (all TODOs removed)
_research/claude-integration/claude-integration-overview.md:173:# âš  2 TODO markers unresolved
_research/claude-integration/claude-integration-overview.md:668:# - 15 TODO markers unresolved
_research/claude-integration/claude-setup-files/commands/check-doc-health.md:32:   - TODO markers unresolved
_research/claude-integration/claude-setup-files/commands/check-doc-health.md:89:- Complete sections (no TODOs)
_research/claude-integration/claude-setup-files/commands/check-doc-health.md:105:- TODO markers count
_research/claude-integration/claude-setup-files/commands/check-doc-health.md:174:   # Count TODOs
_research/claude-integration/claude-setup-files/commands/check-doc-health.md:175:   todo_count=$(grep -r "TODO:" docs/ | wc -l)
_research/claude-integration/claude-setup-files/commands/check-doc-health.md:229:     - Medium: Minor quality issues, old TODOs
_research/claude-integration/claude-setup-files/commands/check-doc-health.md:404:Priority 4: Resolve 12 TODO markers (2h)
_research/claude-integration/claude-setup-files/commands/update-doc.md:280:- [ ] No TODO markers left (unless intentional)
_research/claude-integration/output-styles.md:529:- TODO markers: [count]
_research/roadmap/testing-checklist.md:748:  - No TODO, FIXME, or placeholder comments
_research/templates/repo-structure.md:299:- Generic principles with TODO markers for specialization
_research/templates/repo-structure.md:309:- Language-specific sections (TODO markers)
_research/templates/repo-structure.md:384:- Immediately: Fill TODO markers with project specifics
_research/templates/repo-structure.md:516:- Check for TODO markers
_research/templates/repo-structure.md:768:- Verify TODO markers have instructions
_research/templates/repo-structure.md:808:     3. Fill TODO markers in docs/standards.md
_research/templates/repo-structure.md:823:- Fill TODO markers in `docs/writing-software.md`
_research/templates/template-code-review.md:94:[TODO: Define what requires review in your project]
_research/templates/template-code-review.md:109:[TODO: Adjust based on team size and velocity]
_research/templates/template-code-review.md:119:**Self-Review Exception** [TODO: Define self-review policy]:
_research/templates/template-code-review.md:129:[TODO: Describe your PR creation workflow]
_research/templates/template-code-review.md:144:   - Check for debugging code, TODOs, etc.
_research/templates/template-code-review.md:152:[TODO: Customize this template or link to your GitHub PR template]
_research/templates/template-code-review.md:192:[TODO: Define expected review turnaround]
_research/templates/template-code-review.md:245:[TODO: Customize your feedback categories]
_research/templates/template-code-review.md:346:[TODO: Add topics specific to your project. Below are common examples.]
_research/templates/template-code-review.md:546:[TODO: Define your feedback categories]
_research/templates/template-code-review.md:608:I've added a TODO comment.
_research/templates/template-code-review.md:720:[TODO: Define escalation process for your team]
_research/templates/template-code-review.md:733:[TODO: If you track review metrics, document them]
_research/templates/template-doc-health.md:133:[TODO: Assign monthly documentation review responsibility]
_research/templates/template-doc-health.md:150:[TODO: Assign quarterly documentation review responsibility]
_research/templates/template-doc-health.md:172:[TODO: Assign annual documentation review responsibility]
_research/templates/template-doc-health.md:214:[TODO: Document automated drift detection if implemented]
_research/templates/template-doc-health.md:260:[TODO: If you track documentation analytics, document it]
_research/templates/template-doc-health.md:282:[TODO: Define documentation ownership model]
_research/templates/template-doc-health.md:322:[TODO: Assign overall documentation steward if applicable]
_research/templates/template-doc-health.md:343:[TODO: Ensure your PR template includes documentation section]
_research/templates/template-doc-health.md:364:[TODO: Define when documentation is mandatory]
_research/templates/template-doc-health.md:413:[TODO: Define documentation coverage metrics]
_research/templates/template-doc-health.md:482:[TODO: Define prioritization framework]
_research/templates/template-doc-health.md:527:[TODO: Document your documentation CI/CD pipeline]
_research/templates/template-doc-health.md:567:[TODO: Document documentation tools]
_research/templates/template-doc-health.md:600:[TODO: Create quarterly review template]
_research/templates/template-onboarding.md:56:[TODO: Brief description of the project]
_research/templates/template-onboarding.md:62:[TODO: Describe your team culture and values]
_research/templates/template-onboarding.md:85:[TODO: List accounts needed and how to request them]
_research/templates/template-onboarding.md:100:[TODO: List required tools and installation links]
_research/templates/template-onboarding.md:134:[TODO: Document any special setup steps]
_research/templates/template-onboarding.md:138:[TODO: Describe environment configuration]
_research/templates/template-onboarding.md:200:[TODO: Provide a guided tour of key files/directories]
_research/templates/template-onboarding.md:217:[TODO: Provide hands-on exercises]
_research/templates/template-onboarding.md:254:[TODO: Link to good first issues]
_research/templates/template-onboarding.md:283:[TODO: Suggest areas to explore based on your architecture]
_research/templates/template-onboarding.md:325:[TODO: Describe typical Week 2 tasks]
_research/templates/template-onboarding.md:339:[TODO: Guide for first reviews]
_research/templates/template-onboarding.md:382:[TODO: Link to essential documentation]
_research/templates/template-onboarding.md:403:[TODO: Link to external learning resources]
_research/templates/template-onboarding.md:419:[TODO: Document tribal knowledge that's not written elsewhere]
_research/templates/template-onboarding.md:437:[TODO: Describe onboarding buddy system]
_research/templates/template-onboarding.md:452:[TODO: List domain experts and their areas]
_research/templates/template-onboarding.md:467:[TODO: Describe communication channels]
_research/templates/template-onboarding.md:490:[TODO: Document common mistakes and confusions for new team members]
_research/templates/template-onboarding.md:534:[TODO: Create mechanism for onboarding feedback]
_research/templates/template-onboarding.md:554:[TODO: Guide for people serving as onboarding buddies]
_research/templates/template-patterns.md:87:| [Event Sourcing](#event-sourcing) | Domain | Audit trail and eventual consistency | {{TODO: FREQUENCY}} |
_research/templates/template-patterns.md:88:| [CQRS](#cqrs) | Domain | Read/write separation | {{TODO: FREQUENCY}} |
_research/templates/template-patterns.md:89:| [Saga Pattern](#saga-pattern) | Integration | Distributed transactions | {{TODO: FREQUENCY}} |
_research/templates/template-patterns.md:94:[TODO: Add or remove patterns based on your project. This table should reflect patterns actually used in your codebase.]
_research/templates/template-patterns.md:118:[TODO: Provide actual structure from your codebase]
_research/templates/template-patterns.md:136:[TODO: Link to actual examples in your codebase]
_research/templates/template-patterns.md:141:[TODO: Paste a real action from your codebase]
_research/templates/template-patterns.md:230:[TODO: Provide actual interface structure]
_research/templates/template-patterns.md:244:[TODO: Link to actual repository implementations]
_research/templates/template-patterns.md:249:[TODO: Paste a real repository from your codebase]
_research/templates/template-patterns.md:360:[TODO: Provide actual Result type from your codebase]
_research/templates/template-patterns.md:379:[TODO: Link to actual Result type implementation]
_research/templates/template-patterns.md:384:[TODO: Paste your Result type implementation]
_research/templates/template-patterns.md:457:[TODO: Provide actual DI pattern from your codebase]
_research/templates/template-patterns.md:473:[TODO: Describe your DI approach - manual, container, framework]
_research/templates/template-patterns.md:511:**Container-Based Injection** [TODO: If you use a DI container, document it here]:
_research/templates/template-patterns.md:514:[TODO: Provide example if using container like tsyringe, awilix, etc.]
_research/templates/template-patterns.md:542:[TODO: Add domain patterns relevant to your project. Below are common examples - customize or replace.]
_research/templates/template-patterns.md:546:[TODO: If you use event sourcing, document it. Otherwise, remove this section.]
_research/templates/template-patterns.md:561:[TODO: Link to event sourcing implementation in your codebase]
_research/templates/template-patterns.md:564:[TODO: Provide example if using event sourcing]
_research/templates/template-patterns.md:571:[TODO: If you use CQRS, document it. Otherwise, remove this section.]
_research/templates/template-patterns.md:586:[TODO: Link to CQRS implementation in your codebase]
_research/templates/template-patterns.md:589:[TODO: Provide example if using CQRS]
_research/templates/template-patterns.md:614:[TODO: Provide actual adapter interface]
_research/templates/template-patterns.md:625:[TODO: Link to actual adapter implementations]
_research/templates/template-patterns.md:630:[TODO: Paste a real adapter from your codebase]
_research/templates/template-patterns.md:740:[TODO: If you use sagas for distributed transactions, document it. Otherwise, remove this section.]
_research/templates/template-patterns.md:755:[TODO: Link to saga implementations in your codebase]
_research/templates/template-patterns.md:758:[TODO: Provide example if using sagas]
_research/templates/template-patterns.md:783:[TODO: Provide actual value object structure]
_research/templates/template-patterns.md:809:[TODO: Link to value object examples]
_research/templates/template-patterns.md:814:[TODO: Paste a real value object from your codebase]
_research/templates/template-patterns.md:916:[TODO: Provide actual test builder structure]
_research/templates/template-patterns.md:945:[TODO: Link to test builder examples]
_research/templates/template-patterns.md:950:[TODO: Paste a real test builder from your codebase]
_research/templates/template-patterns.md:1058:[TODO: Define your process for adding patterns]
_research/templates/template-patterns.md:1082:[TODO: Document anti-patterns your team explicitly avoids]
_research/templates/template-patterns.md:1096:[TODO: Code example showing anti-pattern]
_research/templates/template-patterns.md:1099:[TODO: Code example showing preferred pattern]
_research/templates/template-patterns.md:1106:[TODO: Provide concrete examples for your project's tech stack(s).]
_research/templates/template-patterns.md:1110:[TODO: Show how patterns are implemented in this stack]
_research/templates/template-patterns.md:1114:[TODO: Show how patterns are implemented in this stack]
_research/templates/template-patterns.md:1124:[TODO: Maintain changelog of pattern changes]
_research/templates/template-standards.md:214:[TODO: Add sections for each language used in your project. Below are templates for common languages.]
_research/templates/template-standards.md:218:[TODO: Fill in language-specific standards. Use the templates below as examples.]
_research/templates/template-standards.md:332:[TODO: If your project uses Python, customize this section. Otherwise, remove it.]
_research/templates/template-standards.md:392:[TODO: If your project uses Rust, customize this section. Otherwise, remove it.]
_research/templates/template-standards.md:447:[TODO: If your project uses Go, customize this section. Otherwise, remove it.]
_research/templates/template-standards.md:480:[TODO: Define how files should be organized in your project.]
_research/templates/template-standards.md:510:[TODO: Configure your project for absolute imports and document the path aliases.]
_research/templates/template-standards.md:696:[TODO: Document your project's error handling approach.]
_research/templates/template-standards.md:702:[TODO: Choose one and document it]
_research/templates/template-standards.md:759:[TODO: Document your error type structure]
_research/templates/template-standards.md:762:[TODO: Provide examples of error types used in your project]
_research/templates/template-standards.md:820:[TODO: Define your docstring format for public APIs]
_research/templates/template-standards.md:825:[TODO: Provide docstring example in your language]
_research/templates/template-standards.md:851:### TODO Comments
_research/templates/template-standards.md:853:**Use TODO comments for future work.**
_research/templates/template-standards.md:855:Format: `// TODO(@username): Description of what needs to be done`
_research/templates/template-standards.md:858:// TODO(@tnez): Implement rate limiting for this endpoint
_research/templates/template-standards.md:859:// TODO(@tnez): This validation is duplicated in validators.ts - extract to shared function
_research/templates/template-standards.md:866:[TODO: Document your attribution style]
_research/templates/template-standards.md:881:[TODO: Define where tests live]
_research/templates/template-standards.md:953:[TODO: Document your automated tooling]
_research/templates/template-standards.md:977:Auto-format on save: [TODO: Document editor setup]
_research/templates/template-standards.md:981:[TODO: If using statically typed language]
_research/templates/template-standards.md:992:[TODO: Document pre-commit hooks]
_research/templates/template-standards.md:1022:[TODO: Create a checklist that references these standards]
_research/templates/template-standards.md:1116:[TODO: Maintain changelog of standard changes]
_research/templates/template-testing.md:81:[TODO: Define what requires tests in your project]
_research/templates/template-testing.md:117:[TODO: Define testing requirements for your architecture]
_research/templates/template-testing.md:163:[TODO: Define UI testing approach]
_research/templates/template-testing.md:249:[TODO: Document your test framework and tooling]
_research/templates/template-testing.md:277:[TODO: Document assertion library]
_research/templates/template-testing.md:282:[TODO: Provide examples]
_research/templates/template-testing.md:293:[TODO: Define your mocking strategy]
_research/templates/template-testing.md:303:[TODO: Provide examples]
_research/templates/template-testing.md:315:[TODO: Document test database setup]
_research/templates/template-testing.md:332:[TODO: Document fixture/factory approach]
_research/templates/template-testing.md:337:[TODO: Provide examples]
_research/templates/template-testing.md:352:[TODO: Define where tests live]
_research/templates/template-testing.md:375:[TODO: Define naming convention]
_research/templates/template-testing.md:388:[TODO: Provide test structure template]
_research/templates/template-testing.md:393:[TODO: Provide actual test structure example]
_research/templates/template-testing.md:508:[TODO: Clarify your assertion philosophy]
_research/templates/template-testing.md:652:[TODO: Provide test builder pattern for your language]
_research/templates/template-testing.md:657:[TODO: Show actual builder implementation]
_research/templates/template-testing.md:664:[TODO: Provide fake implementation pattern]
_research/templates/template-testing.md:669:[TODO: Show actual fake implementation]
_research/templates/template-testing.md:691:[TODO: Provide fixture pattern if used]
_research/templates/template-testing.md:696:[TODO: Show actual fixture implementation]
_research/templates/template-testing.md:705:[TODO: Document test commands]
_research/templates/template-testing.md:729:[TODO: Document debugging approach]
_research/templates/template-testing.md:740:[TODO: Document debugger setup]
_research/templates/template-testing.md:763:[TODO: Document CI test process]
_research/templates/template-testing.md:785:[TODO: Document test environments]
_research/templates/template-testing.md:803:[TODO: Define coverage targets]
_research/templates/template-testing.md:839:[TODO: Document common test issues and solutions]
_research/templates/template-testing.md:891:[TODO: If you use AI agents for testing, document the approach]
_research/templates/template-testing.md:911:[TODO: Document agent-driven test workflow if applicable]
_research/templates/template-writing-software.md:56:[TODO: Describe your team's core values. Examples below - customize or replace.]
_research/templates/template-writing-software.md:67:[TODO: What are your team's priorities? Customize this list.]
_research/templates/template-writing-software.md:76:[TODO: What anti-patterns does your team consciously avoid?]
_research/templates/template-writing-software.md:90:[TODO: Describe your actual directory structure. Below is a domain-driven example - adapt to your project.]
_research/templates/template-writing-software.md:118:[TODO: Explain your decision if you've rejected traditional layered architecture.]
_research/templates/template-writing-software.md:130:[TODO: Provide guidance on domain boundaries.]
_research/templates/template-writing-software.md:151:[TODO: Explain your approach to business logic. Below follows the domain actions pattern.]
_research/templates/template-writing-software.md:158:[TODO: Replace with actual code example from your project]
_research/templates/template-writing-software.md:197:[TODO: Explain your model/entity pattern.]
_research/templates/template-writing-software.md:202:[TODO: Replace with actual code example]
_research/templates/template-writing-software.md:237:[TODO: Explain your validation approach.]
_research/templates/template-writing-software.md:242:[TODO: Replace with actual validation library and example]
_research/templates/template-writing-software.md:263:[TODO: Explain your static typing approach, or remove this section for dynamically typed languages.]
_research/templates/template-writing-software.md:268:[TODO: Replace with actual type examples]
_research/templates/template-writing-software.md:298:[TODO: Explain why you've chosen this pattern, or describe your alternative.]
_research/templates/template-writing-software.md:310:[TODO: Provide template for actions in your project.]
_research/templates/template-writing-software.md:315:[TODO: Provide actual template]
_research/templates/template-writing-software.md:333:[TODO: Explain how actions call other actions, if they do.]
_research/templates/template-writing-software.md:338:[TODO: Provide example of action composition]
_research/templates/template-writing-software.md:374:[TODO: Define your testing strategy. Below is an example based on testing business requirements.]
_research/templates/template-writing-software.md:394:[TODO: Customize based on your team's needs.]
_research/templates/template-writing-software.md:407:[TODO: Define your test naming convention.]
_research/templates/template-writing-software.md:427:[TODO: Describe where tests live in your project.]
_research/templates/template-writing-software.md:451:**Rationale**: [TODO: Explain your choice]
_research/templates/template-writing-software.md:455:[TODO: Document how to run tests in your project.]
_research/templates/template-writing-software.md:473:[TODO: Explain your approach to mocking/faking external dependencies.]
_research/templates/template-writing-software.md:478:[TODO: Provide actual example]
_research/templates/template-writing-software.md:521:[TODO: List key external dependencies and how you use them.]
_research/templates/template-writing-software.md:533:[TODO: Define your approach to dependencies.]
_research/templates/template-writing-software.md:543:[TODO: Document how your application integrates with external systems.]
_research/templates/template-writing-software.md:566:[TODO: Define what requires documentation in your project.]
_research/templates/template-writing-software.md:584:[TODO: Specify documentation formats.]
_research/templates/template-writing-software.md:593:[TODO: Explain your documentation maintenance process.]
_research/templates/template-writing-software.md:610:[TODO: Provide guidance on when to refactor.]
_research/templates/template-writing-software.md:627:[TODO: Document your change proposal process.]
_research/templates/template-writing-software.md:641:[TODO: Explain how this document evolves.]
_research/templates/template-writing-software.md:658:[TODO: Provide concrete examples for your project's tech stack(s). Below are examples for common stacks.]
docs/research/mcp-prompts-and-resources.md:963:    // Journal, git status, commits, TODOs
docs/rfcs/rfc-0004-work-artifact-capture-and-surfacing.md:37:- TODO comments in code â†’ scattered, hard to track, often forgotten
docs/rfcs/rfc-0004-work-artifact-capture-and-surfacing.md:463:### Alternative 2: TODO Comments in Code
docs/rfcs/rfc-0004-work-artifact-capture-and-surfacing.md:465:**Description:** Just add TODO comments in files
docs/rfcs/rfc-0005-enhanced-mcp-architecture.md:618:    // 4. Scan for TODOs
docs/rfcs/rfc-0005-enhanced-mcp-architecture.md:643:### TODOs Found
docs/rfcs/rfc-0005-enhanced-mcp-architecture.md:724:    // Implementation: search for TODO/FIXME comments
src/mcp/prompts/builder.ts:78:    // Find TODOs (simple grep)
src/mcp/prompts/builder.ts:81:      todos = execSync('git grep -n "TODO\\|FIXME" || true', {
src/mcp/prompts/builder.ts:86:        todos = 'No TODOs found'
src/mcp/prompts/builder.ts:89:      todos = 'Unable to search for TODOs'
src/mcp/prompts/builder.ts:113:### TODOs Found
templates/onboarding-template.md:56:[TODO: Brief description of the project]
templates/onboarding-template.md:62:[TODO: Describe your team culture and values]
templates/onboarding-template.md:85:[TODO: List accounts needed and how to request them]
templates/onboarding-template.md:100:[TODO: List required tools and installation links]
templates/onboarding-template.md:134:[TODO: Document any special setup steps]
templates/onboarding-template.md:138:[TODO: Describe environment configuration]
templates/onboarding-template.md:200:[TODO: Provide a guided tour of key files/directories]
templates/onboarding-template.md:217:[TODO: Provide hands-on exercises]
templates/onboarding-template.md:254:[TODO: Link to good first issues]
templates/onboarding-template.md:283:[TODO: Suggest areas to explore based on your architecture]
templates/onboarding-template.md:325:[TODO: Describe typical Week 2 tasks]
templates/onboarding-template.md:339:[TODO: Guide for first reviews]
templates/onboarding-template.md:382:[TODO: Link to essential documentation]
templates/onboarding-template.md:403:[TODO: Link to external learning resources]
templates/onboarding-template.md:419:[TODO: Document tribal knowledge that's not written elsewhere]
templates/onboarding-template.md:437:[TODO: Describe onboarding buddy system]
templates/onboarding-template.md:452:[TODO: List domain experts and their areas]
templates/onboarding-template.md:467:[TODO: Describe communication channels]
templates/onboarding-template.md:490:[TODO: Document common mistakes and confusions for new team members]
templates/onboarding-template.md:534:[TODO: Create mechanism for onboarding feedback]
templates/onboarding-template.md:554:[TODO: Guide for people serving as onboarding buddies]
templates/patterns-template.md:87:| [Event Sourcing](#event-sourcing) | Domain | Audit trail and eventual consistency | {{TODO: FREQUENCY}} |
templates/patterns-template.md:88:| [CQRS](#cqrs) | Domain | Read/write separation | {{TODO: FREQUENCY}} |
templates/patterns-template.md:89:| [Saga Pattern](#saga-pattern) | Integration | Distributed transactions | {{TODO: FREQUENCY}} |
templates/patterns-template.md:94:[TODO: Add or remove patterns based on your project. This table should reflect patterns actually used in your codebase.]
templates/patterns-template.md:118:[TODO: Provide actual structure from your codebase]
templates/patterns-template.md:136:[TODO: Link to actual examples in your codebase]
templates/patterns-template.md:141:[TODO: Paste a real action from your codebase]
templates/patterns-template.md:230:[TODO: Provide actual interface structure]
templates/patterns-template.md:244:[TODO: Link to actual repository implementations]
templates/patterns-template.md:249:[TODO: Paste a real repository from your codebase]
templates/patterns-template.md:360:[TODO: Provide actual Result type from your codebase]
templates/patterns-template.md:379:[TODO: Link to actual Result type implementation]
templates/patterns-template.md:384:[TODO: Paste your Result type implementation]
templates/patterns-template.md:457:[TODO: Provide actual DI pattern from your codebase]
templates/patterns-template.md:473:[TODO: Describe your DI approach - manual, container, framework]
templates/patterns-template.md:511:**Container-Based Injection** [TODO: If you use a DI container, document it here]:
templates/patterns-template.md:514:[TODO: Provide example if using container like tsyringe, awilix, etc.]
templates/patterns-template.md:542:[TODO: Add domain patterns relevant to your project. Below are common examples - customize or replace.]
templates/patterns-template.md:546:[TODO: If you use event sourcing, document it. Otherwise, remove this section.]
templates/patterns-template.md:561:[TODO: Link to event sourcing implementation in your codebase]
templates/patterns-template.md:564:[TODO: Provide example if using event sourcing]
templates/patterns-template.md:571:[TODO: If you use CQRS, document it. Otherwise, remove this section.]
templates/patterns-template.md:586:[TODO: Link to CQRS implementation in your codebase]
templates/patterns-template.md:589:[TODO: Provide example if using CQRS]
templates/patterns-template.md:614:[TODO: Provide actual adapter interface]
templates/patterns-template.md:625:[TODO: Link to actual adapter implementations]
templates/patterns-template.md:630:[TODO: Paste a real adapter from your codebase]
templates/patterns-template.md:740:[TODO: If you use sagas for distributed transactions, document it. Otherwise, remove this section.]
templates/patterns-template.md:755:[TODO: Link to saga implementations in your codebase]
templates/patterns-template.md:758:[TODO: Provide example if using sagas]
templates/patterns-template.md:783:[TODO: Provide actual value object structure]
templates/patterns-template.md:809:[TODO: Link to value object examples]
templates/patterns-template.md:814:[TODO: Paste a real value object from your codebase]
templates/patterns-template.md:916:[TODO: Provide actual test builder structure]
templates/patterns-template.md:945:[TODO: Link to test builder examples]
templates/patterns-template.md:950:[TODO: Paste a real test builder from your codebase]
templates/patterns-template.md:1058:[TODO: Define your process for adding patterns]
templates/patterns-template.md:1082:[TODO: Document anti-patterns your team explicitly avoids]
templates/patterns-template.md:1096:[TODO: Code example showing anti-pattern]
templates/patterns-template.md:1099:[TODO: Code example showing preferred pattern]
templates/patterns-template.md:1106:[TODO: Provide concrete examples for your project's tech stack(s).]
templates/patterns-template.md:1110:[TODO: Show how patterns are implemented in this stack]
templates/patterns-template.md:1114:[TODO: Show how patterns are implemented in this stack]
templates/patterns-template.md:1124:[TODO: Maintain changelog of pattern changes]
templates/standards-template.md:214:[TODO: Add sections for each language used in your project. Below are templates for common languages.]
templates/standards-template.md:218:[TODO: Fill in language-specific standards. Use the templates below as examples.]
templates/standards-template.md:332:[TODO: If your project uses Python, customize this section. Otherwise, remove it.]
templates/standards-template.md:392:[TODO: If your project uses Rust, customize this section. Otherwise, remove it.]
templates/standards-template.md:447:[TODO: If your project uses Go, customize this section. Otherwise, remove it.]
templates/standards-template.md:480:[TODO: Define how files should be organized in your project.]
templates/standards-template.md:510:[TODO: Configure your project for absolute imports and document the path aliases.]
templates/standards-template.md:696:[TODO: Document your project's error handling approach.]
templates/standards-template.md:702:[TODO: Choose one and document it]
templates/standards-template.md:759:[TODO: Document your error type structure]
templates/standards-template.md:762:[TODO: Provide examples of error types used in your project]
templates/standards-template.md:820:[TODO: Define your docstring format for public APIs]
templates/standards-template.md:825:[TODO: Provide docstring example in your language]
templates/standards-template.md:851:### TODO Comments
templates/standards-template.md:853:**Use TODO comments for future work.**
templates/standards-template.md:855:Format: `// TODO(@username): Description of what needs to be done`
templates/standards-template.md:858:// TODO(@tnez): Implement rate limiting for this endpoint
templates/standards-template.md:859:// TODO(@tnez): This validation is duplicated in validators.ts - extract to shared function
templates/standards-template.md:866:[TODO: Document your attribution style]
templates/standards-template.md:881:[TODO: Define where tests live]
templates/standards-template.md:953:[TODO: Document your automated tooling]
templates/standards-template.md:977:Auto-format on save: [TODO: Document editor setup]
templates/standards-template.md:981:[TODO: If using statically typed language]
templates/standards-template.md:992:[TODO: Document pre-commit hooks]
templates/standards-template.md:1022:[TODO: Create a checklist that references these standards]
templates/standards-template.md:1116:[TODO: Maintain changelog of standard changes]
templates/testing-template.md:81:[TODO: Define what requires tests in your project]
templates/testing-template.md:117:[TODO: Define testing requirements for your architecture]
templates/testing-template.md:163:[TODO: Define UI testing approach]
templates/testing-template.md:249:[TODO: Document your test framework and tooling]
templates/testing-template.md:277:[TODO: Document assertion library]
templates/testing-template.md:282:[TODO: Provide examples]
templates/testing-template.md:293:[TODO: Define your mocking strategy]
templates/testing-template.md:303:[TODO: Provide examples]
templates/testing-template.md:315:[TODO: Document test database setup]
templates/testing-template.md:332:[TODO: Document fixture/factory approach]
templates/testing-template.md:337:[TODO: Provide examples]
templates/testing-template.md:352:[TODO: Define where tests live]
templates/testing-template.md:375:[TODO: Define naming convention]
templates/testing-template.md:388:[TODO: Provide test structure template]
templates/testing-template.md:393:[TODO: Provide actual test structure example]
templates/testing-template.md:508:[TODO: Clarify your assertion philosophy]
templates/testing-template.md:652:[TODO: Provide test builder pattern for your language]
templates/testing-template.md:657:[TODO: Show actual builder implementation]
templates/testing-template.md:664:[TODO: Provide fake implementation pattern]
templates/testing-template.md:669:[TODO: Show actual fake implementation]
templates/testing-template.md:691:[TODO: Provide fixture pattern if used]
templates/testing-template.md:696:[TODO: Show actual fixture implementation]
templates/testing-template.md:705:[TODO: Document test commands]
templates/testing-template.md:729:[TODO: Document debugging approach]
templates/testing-template.md:740:[TODO: Document debugger setup]
templates/testing-template.md:763:[TODO: Document CI test process]
templates/testing-template.md:785:[TODO: Document test environments]
templates/testing-template.md:803:[TODO: Define coverage targets]
templates/testing-template.md:839:[TODO: Document common test issues and solutions]
templates/testing-template.md:891:[TODO: If you use AI agents for testing, document the approach]
templates/testing-template.md:911:[TODO: Document agent-driven test workflow if applicable]
templates/writing-software-template.md:56:[TODO: Describe your team's core values. Examples below - customize or replace.]
templates/writing-software-template.md:67:[TODO: What are your team's priorities? Customize this list.]
templates/writing-software-template.md:76:[TODO: What anti-patterns does your team consciously avoid?]
templates/writing-software-template.md:90:[TODO: Describe your actual directory structure. Below is a domain-driven example - adapt to your project.]
templates/writing-software-template.md:118:[TODO: Explain your decision if you've rejected traditional layered architecture.]
templates/writing-software-template.md:130:[TODO: Provide guidance on domain boundaries.]
templates/writing-software-template.md:151:[TODO: Explain your approach to business logic. Below follows the domain actions pattern.]
templates/writing-software-template.md:158:[TODO: Replace with actual code example from your project]
templates/writing-software-template.md:197:[TODO: Explain your model/entity pattern.]
templates/writing-software-template.md:202:[TODO: Replace with actual code example]
templates/writing-software-template.md:237:[TODO: Explain your validation approach.]
templates/writing-software-template.md:242:[TODO: Replace with actual validation library and example]
templates/writing-software-template.md:263:[TODO: Explain your static typing approach, or remove this section for dynamically typed languages.]
templates/writing-software-template.md:268:[TODO: Replace with actual type examples]
templates/writing-software-template.md:298:[TODO: Explain why you've chosen this pattern, or describe your alternative.]
templates/writing-software-template.md:310:[TODO: Provide template for actions in your project.]
templates/writing-software-template.md:315:[TODO: Provide actual template]
templates/writing-software-template.md:333:[TODO: Explain how actions call other actions, if they do.]
templates/writing-software-template.md:338:[TODO: Provide example of action composition]
templates/writing-software-template.md:374:[TODO: Define your testing strategy. Below is an example based on testing business requirements.]
templates/writing-software-template.md:394:[TODO: Customize based on your team's needs.]
templates/writing-software-template.md:407:[TODO: Define your test naming convention.]
templates/writing-software-template.md:427:[TODO: Describe where tests live in your project.]
templates/writing-software-template.md:451:**Rationale**: [TODO: Explain your choice]
templates/writing-software-template.md:455:[TODO: Document how to run tests in your project.]
templates/writing-software-template.md:473:[TODO: Explain your approach to mocking/faking external dependencies.]
templates/writing-software-template.md:478:[TODO: Provide actual example]
templates/writing-software-template.md:521:[TODO: List key external dependencies and how you use them.]
templates/writing-software-template.md:533:[TODO: Define your approach to dependencies.]
templates/writing-software-template.md:543:[TODO: Document how your application integrates with external systems.]
templates/writing-software-template.md:566:[TODO: Define what requires documentation in your project.]
templates/writing-software-template.md:584:[TODO: Specify documentation formats.]
templates/writing-software-template.md:593:[TODO: Explain your documentation maintenance process.]
templates/writing-software-template.md:610:[TODO: Provide guidance on when to refactor.]
templates/writing-software-template.md:627:[TODO: Document your change proposal process.]
templates/writing-software-template.md:641:[TODO: Explain how this document evolves.]
templates/writing-software-template.md:658:[TODO: Provide concrete examples for your project's tech stack(s). Below are examples for common stacks.]
test/TESTING-CHECKLIST.md:93:- [ ] TODO markers are appropriate

```

## Your Task

Analyze the context above and generate a comprehensive continuation prompt. Focus on extracting insights and rationale, not just summarizing facts.

**Critical considerations:**

1. **Mission & Objective**: What is the main goal of this project/feature? What progress has been made toward it?

2. **Key Discoveries**: What important decisions, patterns, or constraints were discovered that must be preserved? (Don't just list what was done - explain what was learned)

3. **Files Modified**: What files were changed and **WHY**? What was the rationale behind each significant change?

4. **Partially Explored Ideas**: Are there any ongoing threads of thought or partially explored approaches that shouldn't be lost? What questions remain unanswered?

5. **Immediate Next Steps**: What should be done next? (Prioritized, with rationale)

6. **Pending Work**: Are there pending commits, reviews, validations, or other work in progress?

7. **Context That Can't Be Lost**: What critical context or constraints must the next session understand to avoid backtracking?

## Output Format

Structure your response in whatever format will be most effective for continuation. The goal is that another Claude instance reading your output should be able to continue as if no context window reset occurred.

Be specific, cite file paths with line numbers where relevant, and focus on **why** things were done, not just **what** was done.


âœ… Prompt generated! (40794 characters)
